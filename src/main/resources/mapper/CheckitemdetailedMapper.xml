<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.elmboot.mapper.CheckitemdetailedMapper">
  <resultMap id="BaseResultMap" type="com.example.elmboot.entity.Checkitemdetailed">
    <id column="cdId" jdbcType="INTEGER" property="cdid" />
    <result column="ciName" jdbcType="VARCHAR" property="ciname" />
    <result column="unit" jdbcType="VARCHAR" property="unit" />
    <result column="minrange" jdbcType="DOUBLE" property="minrange" />
    <result column="maxrange" jdbcType="DOUBLE" property="maxrange" />
    <result column="normalValue" jdbcType="VARCHAR" property="normalvalue" />
    <result column="normalValueString" jdbcType="VARCHAR" property="normalvaluestring" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="cild" jdbcType="INTEGER" property="cild" />
    <result column="remarks" jdbcType="VARCHAR" property="remarks" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    cdId, ciName, unit, minrange, maxrange, normalValue, normalValueString, type, cild, 
    remarks
  </sql>
  <select id="selectByExample" parameterType="com.example.elmboot.entity.CheckitemdetailedExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from checkitemdetailed
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from checkitemdetailed
    where cdId = #{cdid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from checkitemdetailed
    where cdId = #{cdid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.elmboot.entity.CheckitemdetailedExample">
    delete from checkitemdetailed
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.elmboot.entity.Checkitemdetailed">
    insert into checkitemdetailed (cdId, ciName, unit, 
      minrange, maxrange, normalValue, 
      normalValueString, type, cild, 
      remarks)
    values (#{cdid,jdbcType=INTEGER}, #{ciname,jdbcType=VARCHAR}, #{unit,jdbcType=VARCHAR}, 
      #{minrange,jdbcType=DOUBLE}, #{maxrange,jdbcType=DOUBLE}, #{normalvalue,jdbcType=VARCHAR}, 
      #{normalvaluestring,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, #{cild,jdbcType=INTEGER}, 
      #{remarks,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.example.elmboot.entity.Checkitemdetailed">
    insert into checkitemdetailed
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="cdid != null">
        cdId,
      </if>
      <if test="ciname != null">
        ciName,
      </if>
      <if test="unit != null">
        unit,
      </if>
      <if test="minrange != null">
        minrange,
      </if>
      <if test="maxrange != null">
        maxrange,
      </if>
      <if test="normalvalue != null">
        normalValue,
      </if>
      <if test="normalvaluestring != null">
        normalValueString,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="cild != null">
        cild,
      </if>
      <if test="remarks != null">
        remarks,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="cdid != null">
        #{cdid,jdbcType=INTEGER},
      </if>
      <if test="ciname != null">
        #{ciname,jdbcType=VARCHAR},
      </if>
      <if test="unit != null">
        #{unit,jdbcType=VARCHAR},
      </if>
      <if test="minrange != null">
        #{minrange,jdbcType=DOUBLE},
      </if>
      <if test="maxrange != null">
        #{maxrange,jdbcType=DOUBLE},
      </if>
      <if test="normalvalue != null">
        #{normalvalue,jdbcType=VARCHAR},
      </if>
      <if test="normalvaluestring != null">
        #{normalvaluestring,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="cild != null">
        #{cild,jdbcType=INTEGER},
      </if>
      <if test="remarks != null">
        #{remarks,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.elmboot.entity.CheckitemdetailedExample" resultType="java.lang.Long">
    select count(*) from checkitemdetailed
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update checkitemdetailed
    <set>
      <if test="record.cdid != null">
        cdId = #{record.cdid,jdbcType=INTEGER},
      </if>
      <if test="record.ciname != null">
        ciName = #{record.ciname,jdbcType=VARCHAR},
      </if>
      <if test="record.unit != null">
        unit = #{record.unit,jdbcType=VARCHAR},
      </if>
      <if test="record.minrange != null">
        minrange = #{record.minrange,jdbcType=DOUBLE},
      </if>
      <if test="record.maxrange != null">
        maxrange = #{record.maxrange,jdbcType=DOUBLE},
      </if>
      <if test="record.normalvalue != null">
        normalValue = #{record.normalvalue,jdbcType=VARCHAR},
      </if>
      <if test="record.normalvaluestring != null">
        normalValueString = #{record.normalvaluestring,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.cild != null">
        cild = #{record.cild,jdbcType=INTEGER},
      </if>
      <if test="record.remarks != null">
        remarks = #{record.remarks,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update checkitemdetailed
    set cdId = #{record.cdid,jdbcType=INTEGER},
      ciName = #{record.ciname,jdbcType=VARCHAR},
      unit = #{record.unit,jdbcType=VARCHAR},
      minrange = #{record.minrange,jdbcType=DOUBLE},
      maxrange = #{record.maxrange,jdbcType=DOUBLE},
      normalValue = #{record.normalvalue,jdbcType=VARCHAR},
      normalValueString = #{record.normalvaluestring,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=INTEGER},
      cild = #{record.cild,jdbcType=INTEGER},
      remarks = #{record.remarks,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.elmboot.entity.Checkitemdetailed">
    update checkitemdetailed
    <set>
      <if test="ciname != null">
        ciName = #{ciname,jdbcType=VARCHAR},
      </if>
      <if test="unit != null">
        unit = #{unit,jdbcType=VARCHAR},
      </if>
      <if test="minrange != null">
        minrange = #{minrange,jdbcType=DOUBLE},
      </if>
      <if test="maxrange != null">
        maxrange = #{maxrange,jdbcType=DOUBLE},
      </if>
      <if test="normalvalue != null">
        normalValue = #{normalvalue,jdbcType=VARCHAR},
      </if>
      <if test="normalvaluestring != null">
        normalValueString = #{normalvaluestring,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="cild != null">
        cild = #{cild,jdbcType=INTEGER},
      </if>
      <if test="remarks != null">
        remarks = #{remarks,jdbcType=VARCHAR},
      </if>
    </set>
    where cdId = #{cdid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.elmboot.entity.Checkitemdetailed">
    update checkitemdetailed
    set ciName = #{ciname,jdbcType=VARCHAR},
      unit = #{unit,jdbcType=VARCHAR},
      minrange = #{minrange,jdbcType=DOUBLE},
      maxrange = #{maxrange,jdbcType=DOUBLE},
      normalValue = #{normalvalue,jdbcType=VARCHAR},
      normalValueString = #{normalvaluestring,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      cild = #{cild,jdbcType=INTEGER},
      remarks = #{remarks,jdbcType=VARCHAR}
    where cdId = #{cdid,jdbcType=INTEGER}
  </update>
</mapper>