<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.elmboot.mapper.HospitalMapper">
  <resultMap id="BaseResultMap" type="com.example.elmboot.entity.Hospital">
    <id column="hpld" jdbcType="INTEGER" property="hpld" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="telephone" jdbcType="VARCHAR" property="telephone" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="businessHours" jdbcType="VARCHAR" property="businesshours" />
    <result column="deadline" jdbcType="VARCHAR" property="deadline" />
    <result column="rule" jdbcType="VARCHAR" property="rule" />
    <result column="state" jdbcType="INTEGER" property="state" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.example.elmboot.entity.Hospital">
    <result column="picture" jdbcType="LONGVARCHAR" property="picture" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    hpld, name, telephone, address, businessHours, deadline, rule, state
  </sql>
  <sql id="Blob_Column_List">
    picture
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.example.elmboot.entity.HospitalExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from hospital
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.example.elmboot.entity.HospitalExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from hospital
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from hospital
    where hpld = #{hpld,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from hospital
    where hpld = #{hpld,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.elmboot.entity.HospitalExample">
    delete from hospital
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.elmboot.entity.Hospital">
    insert into hospital (hpld, name, telephone, 
      address, businessHours, deadline, 
      rule, state, picture
      )
    values (#{hpld,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{telephone,jdbcType=VARCHAR}, 
      #{address,jdbcType=VARCHAR}, #{businesshours,jdbcType=VARCHAR}, #{deadline,jdbcType=VARCHAR}, 
      #{rule,jdbcType=VARCHAR}, #{state,jdbcType=INTEGER}, #{picture,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.elmboot.entity.Hospital">
    insert into hospital
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="hpld != null">
        hpld,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="telephone != null">
        telephone,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="businesshours != null">
        businessHours,
      </if>
      <if test="deadline != null">
        deadline,
      </if>
      <if test="rule != null">
        rule,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="picture != null">
        picture,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="hpld != null">
        #{hpld,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="telephone != null">
        #{telephone,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="businesshours != null">
        #{businesshours,jdbcType=VARCHAR},
      </if>
      <if test="deadline != null">
        #{deadline,jdbcType=VARCHAR},
      </if>
      <if test="rule != null">
        #{rule,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="picture != null">
        #{picture,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.elmboot.entity.HospitalExample" resultType="java.lang.Long">
    select count(*) from hospital
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update hospital
    <set>
      <if test="record.hpld != null">
        hpld = #{record.hpld,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.telephone != null">
        telephone = #{record.telephone,jdbcType=VARCHAR},
      </if>
      <if test="record.address != null">
        address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.businesshours != null">
        businessHours = #{record.businesshours,jdbcType=VARCHAR},
      </if>
      <if test="record.deadline != null">
        deadline = #{record.deadline,jdbcType=VARCHAR},
      </if>
      <if test="record.rule != null">
        rule = #{record.rule,jdbcType=VARCHAR},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.picture != null">
        picture = #{record.picture,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update hospital
    set hpld = #{record.hpld,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      telephone = #{record.telephone,jdbcType=VARCHAR},
      address = #{record.address,jdbcType=VARCHAR},
      businessHours = #{record.businesshours,jdbcType=VARCHAR},
      deadline = #{record.deadline,jdbcType=VARCHAR},
      rule = #{record.rule,jdbcType=VARCHAR},
      state = #{record.state,jdbcType=INTEGER},
      picture = #{record.picture,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update hospital
    set hpld = #{record.hpld,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      telephone = #{record.telephone,jdbcType=VARCHAR},
      address = #{record.address,jdbcType=VARCHAR},
      businessHours = #{record.businesshours,jdbcType=VARCHAR},
      deadline = #{record.deadline,jdbcType=VARCHAR},
      rule = #{record.rule,jdbcType=VARCHAR},
      state = #{record.state,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.elmboot.entity.Hospital">
    update hospital
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="telephone != null">
        telephone = #{telephone,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="businesshours != null">
        businessHours = #{businesshours,jdbcType=VARCHAR},
      </if>
      <if test="deadline != null">
        deadline = #{deadline,jdbcType=VARCHAR},
      </if>
      <if test="rule != null">
        rule = #{rule,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="picture != null">
        picture = #{picture,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where hpld = #{hpld,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.example.elmboot.entity.Hospital">
    update hospital
    set name = #{name,jdbcType=VARCHAR},
      telephone = #{telephone,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      businessHours = #{businesshours,jdbcType=VARCHAR},
      deadline = #{deadline,jdbcType=VARCHAR},
      rule = #{rule,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER},
      picture = #{picture,jdbcType=LONGVARCHAR}
    where hpld = #{hpld,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.elmboot.entity.Hospital">
    update hospital
    set name = #{name,jdbcType=VARCHAR},
      telephone = #{telephone,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      businessHours = #{businesshours,jdbcType=VARCHAR},
      deadline = #{deadline,jdbcType=VARCHAR},
      rule = #{rule,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER}
    where hpld = #{hpld,jdbcType=INTEGER}
  </update>
</mapper>